<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<mapper namespace="com.fun.likechat.persistence.mapper.ActorDynamicMapper">
	<!-- 根据情况定制属性列表 <resultMap id="RM.ActorDynamic" type="com.fun.likechat.po.ActorDynamic"> 
		<result property="id" column="id"/> <result property="actorId" column="actor_id"/> 
		<result property="content" column="content"/> <result property="price" column="price"/> 
		<result property="createTime" column="create_time"/> <result property="updateTime" 
		column="update_time"/> </resultMap> -->

	<!-- 查询公用抽取的列 -->
	<sql id="columns_all">
	    <![CDATA[
		id,actor_id,type,content,price,page_view,create_time,update_time
	    ]]>
	</sql>

	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_actor_dynamic (
        	id,
        	actor_id,
        	type,
        	content,
        	price,
        	page_view,
        	create_time,
        	update_time
        ) VALUES (
        	#{id},
        	#{actorId},
        	#{	type},
        	#{content},
        	#{price},
        	#{pageView},
        	#{createTime},
        	#{updateTime}
        )
    ]]>
	</insert>

	<update id="update" parameterType="com.fun.likechat.persistence.po.ActorDynamic">
		UPDATE t_actor_dynamic
		<set>
			<if test="actorId != null">
				actor_id = #{actorId},
			</if>
			<if test="content != null">
				content = #{content},
			</if>
			<if test="price != null">
				price = #{price},
			</if>
			<if test="pageView != null">
				page_view = #{pageView},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime}
			</if>
		</set>
		WHERE
		id = #{id}
	</update>

	<delete id="deleteById">
		DELETE FROM t_actor_dynamic WHERE
		id = #{id}
	</delete>

	<select id="getById" resultType="com.fun.likechat.persistence.po.ActorDynamic">
		SELECT
		*
		FROM
		t_actor_dynamic
		WHERE
		id = #{id}
	</select>

	<!-- 查询条件where,如果有时间范围查询，参数必须是startTime 和 endTime -->
	<sql id="where">
		<where>
			<if test="id != null">
				AND id = #{id}
			</if>
			<if test="actorId != null">
				AND actor_id = #{actorId}
			</if>
			<if test="type != null">
				AND type = #{type}
			</if>
			<if test="content != null">
				AND content = #{content}
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
			<if test="pageView != null">
				AND page_view = #{pageView}
			</if>
			<if test="startTime != null">
	       	<![CDATA[
				AND create_time >= #{startTime} 
			]]>
			</if>
			<if test="endTime != null">
			<![CDATA[
				AND create_time < #{endTime}
			]]>
			</if>
		</where>
	</sql>

	<sql id="whereForPo">
		<where>
			<if test="id != null">
				AND id = #{id}
			</if>
			<if test="actorId != null">
				AND actor_id = #{actorId}
			</if>
			<if test="type != null">
				AND type = #{type}
			</if>
			<if test="content != null">
				AND content = #{content}
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
		</where>
	</sql>

	<select id="count" parameterType="java.util.Map" resultType="int">
		SELECT count(*) FROM t_actor_dynamic
		<include refid="where" />
	</select>

	<select id="getListByMap" parameterType="java.util.Map"
		resultType="com.fun.likechat.persistence.po.ActorDynamic">
		SELECT
		*
		FROM
		t_actor_dynamic
		<include refid="where" />
		${limit}
	</select>

	<select id="getListByPo" parameterType="com.fun.likechat.persistence.po.ActorDynamic"
		resultType="com.fun.likechat.persistence.po.ActorDynamic">
		SELECT
		*
		FROM
		t_actor_dynamic
		<include refid="whereForPo" />
	</select>
	<select id="getNewestDynamic" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
		b.id as actorId,b.nickname,b.icon,b.signature,a.type,a.price,a.page_view,a.create_time,a.content,a.id
		FROM
		t_actor_dynamic a, t_actor b
		where a.actor_id=b.id
		<if test="actorId > 0">
			and a.actor_id=#{actorId}
		</if>
		order by a.create_time desc
		<if test="pageSize > 0">
			limit #{startPage}, #{pageSize}
		</if>
	</select>
	<select id="newestDynamicCount" parameterType="java.util.Map" resultType="int">
		SELECT count(a.id)
		FROM
		t_actor_dynamic a, t_actor b
		where a.actor_id=b.id
		<if test="actorId > 0">
			and a.actor_id=#{actorId}
		</if>
	</select>
	<select id="getHotDynamic" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
		b.id as actorId,b.nickname,b.icon,b.signature,a.type,a.price,a.page_view,a.create_time,a.content,a.id
		FROM
		t_actor_dynamic a, t_actor b
		where a.actor_id=b.id order by
		a.page_view desc
		<if test="pageSize > 0">
			limit #{startPage}, #{pageSize}
		</if>
	</select>
	<select id="hotDynamicCount" parameterType="java.util.Map"
		resultType="int">
		SELECT count(a.id)
		FROM
		t_actor_dynamic a, t_actor b
		where a.actor_id=b.id
	</select>
	<select id="getAttentionDynamic" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT c.id as actorId, c.nickname,c.icon,c.signature,a.type,a.price,a.page_view,a.create_time,a.content,a.id
		FROM
		t_actor_dynamic a,t_user_attention b,t_actor c where
		a.actor_id=b.actor_id
		and a.actor_id=c.id and b.user_id=#{userId}
		order by a.update_time desc
		<if test="pageSize > 0">
			limit #{startPage}, #{pageSize}
		</if>
	</select>
	<select id="attentionDynamicCount" parameterType="java.util.Map" resultType="int">
		SELECT count(a.id)
		FROM
		t_actor_dynamic a,t_user_attention
		b,t_actor c where a.actor_id=b.actor_id
		and a.actor_id=c.id
	</select>
	
	<select id="newestOneDynamic"   resultType="com.fun.likechat.persistence.po.ActorDynamic">
		select a.*  from t_actor_dynamic a  where a.actor_id = #{actorId}   order by a.id limit 1
	</select>
	
	<select id="addDynamicPageView" >
		UPDATE t_actor_dynamic SET page_view=page_view + 1 WHERE id=#{id}
	</select>
</mapper>

